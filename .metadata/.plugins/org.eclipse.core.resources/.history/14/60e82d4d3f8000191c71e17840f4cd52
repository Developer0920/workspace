package java0527_jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class MemDAO {

	private Connection conn = null;
	private Statement stmt = null;
	private PreparedStatement pastmt = null;
	private ResultSet rs = null;
	
	//싱글톤 패턴
	private MemDAO() {
		
	}
	
	private static MemDAO dao = new MemDAO();
	
	public static MemDAO getInstance() { 
		return dao;
	}
	
	//Connection객체값 가져오기
	private Connection init() throws ClassNotFoundException, SQLException {
		Class.forName("oracle.jdbc.OracleDriver");
		String url = "jdbc:oracle:thin://@127.0.0.1:1521:ex";
		String username = "hr";
		String password = "a1234";
		return DriverManager.getConnection(url, username, password);
	} //end init()
	
	//종료시켜주기
	//연결종료
	private void exit() {		
		if(rs!=null)
			try {
				rs.close();
			} catch (SQLException e) {				
				e.printStackTrace();
			}
		if(stmt!=null)
			try {
				stmt.close();
			} catch (SQLException e) {				
				e.printStackTrace();
			}
		if(conn!=null)
			try {
				conn.close();
			} catch (SQLException e) {				
				e.printStackTrace();
			}
		
	}//end exit()
	
	public List<MemDTO> listMethod() {
		List<MemDTO> aList = new ArrayList<MemDTO> ();
		
		try {
			conn = init(); //여기선 multi catch로 한 번에!
			stmt = conn.createStatement();//쿼리문을 실행해주는..executeQuery. 이건 statement 인터페이스에 있다??
			String sql = "select * from mem order by num";
			rs = stmt.executeQuery(sql); //select로 가져온 결과값은 rs가 받는다. 이걸 DTO에서 사용할 수 있도록 해야 한다.
			//근데, 이걸 바로 넘기면 안 된다. 결과값을 가져오면.. 연결을 끊어줘야 한다. 클라이언트가 접속을 하고 있다고 생각함. DB 과부화.
			while(rs.next()) {
				MemDTO dto = new MemDTO();
				dto.setNum(rs.getInt("num")); //여기 저장된 값이 int이므로 getInt를 씀.
				dto.setName(rs.getString("name"));
				dto.setAge(rs.getInt("age"));
				dto.setLoc(rs.getInt("loc"));
				aList.add(dto);
			}
			
		} catch (ClassNotFoundException | SQLException e) {			
			e.printStackTrace();
		} finally {
			
			exit();
		
		}
		return aList; //최종적으로 select해서 받아온 갓을 여기에 담아서 리턴해줘야.
	} //end listMethod()//////////////////////////////////////
	
	
		
	public List<MemDTO> listMethod() {
		List<MemDTO> aList = new ArrayList<MemDTO>();
		
		return aList;
	} //end listMethod()
		
} //end class
