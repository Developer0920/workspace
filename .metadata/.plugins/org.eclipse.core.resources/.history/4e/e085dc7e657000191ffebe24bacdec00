package java0504_api;

import java.util.Calendar;

abstract class Test{
	
	public static Test getInstance() {
		return new TestExam();
	}
	
	abstract public void prn();
} //end test

class TestExam extends Test{
	/* 
	public static Test getInstance() {
		 return new TestExam();
	
	 }
	 */
	
	public void prn() {
		System.out.println("prn");
	}
} //end TestExam


public class Java145_Calendar {

	public static void main(String[] args) {
		//Test tt = new TestExam(); //upcasting 발생
		//Test tt = Test.getInstance();
		//System.out.println(tt);
		//tt.prn();
		
		//Calendar은 추상클래스이므로 객체 생성을 할 수 없다.
		Calendar cal = Calendar.getInstance();
		//Calendar cal2 = Calendar.getInstance();
		//System.out.println(cal==cal2); //호출할 때마다 생성하기 때문 //이런 식으로 객체를 생성할 수 있음
		
		System.out.println(cal.toString()); //오버라이딩 됨
		/*
		int year1 = cal.YEAR; //이렇게 하면 1이 나와버림
		System.out.printf("%d", year); 
		*/
		
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH);
		System.out.println(year);
		System.out.println(month);
		
		
		
		
		
	}//end main()

} //end class

//calendar라는 클래스가 이딴 식으로 구현돼 있음.
//추상메소드를 오버라이딩하면 그걸 부모형 참조변수가 접근할 수 있다?

